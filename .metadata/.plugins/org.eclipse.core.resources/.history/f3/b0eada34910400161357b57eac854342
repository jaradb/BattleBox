package view;

import java.util.ArrayList;
import battleBox.Constants;
import battleBox.Vector2;
import model.GameBoard;
import model.Token;
import view.guiInterface.*;



public class BoardRenderer
{
	
	public GameBoard boardToRender;
	GUIFactory guiFactory;
	
	public Image crossHairLabel;
	public Image playerTurnLabel;
	
	
	
	Image[][] tileImages = null;

	ArrayList<Image> tokenImages = null;
	
	public BoardRenderer(GUIFactory guiFactoryToUse)
	{
		guiFactory = guiFactoryToUse;
	}


	public void setBoardToRender(GameBoard board)
	{
		boardToRender = board;
	}
	
	public void createTileImages()
	{
		int boardWidth = Constants.boardWidth;
		int boardHeight = Constants.boardHeight;
		
		tileImages = new Image[boardWidth][boardHeight];
						
		for(int i = 0; i < boardWidth; i++)
		{
			for(int j = 0; j < boardHeight; j++)
			{
				tileImages[i][j] = guiFactory.CreateImage(guiFactory.CreateTexture(boardToRender.tileGrid[i][j].getImageAssetName()));
				tileImages[i][j].setSize(new Vector2(Constants.defaultTileSize, Constants.defaultTileSize));
				tileImages[i][j].setGridPosition(new Vector2(i, j));
			}
		}
	}
	
	public void createTokenImages()
	{
		crossHairLabel  = guiFactory.CreateImage(guiFactory.CreateTexture("crosshair.png"));
		
		crossHairLabel.setSize(new Vector2(Constants.defaultTileSize, Constants.defaultTileSize));
		crossHairLabel.setGridPosition(new Vector2(0, 0));
		crossHairLabel.setVisible(false);
		
		tokenImages = new ArrayList<Image>();

		for(int i = 0; i < boardToRender.tokens.size(); i++)
		{
			Image newToken = guiFactory.CreateImage(guiFactory.CreateTexture(boardToRender.tokens.get(i).getImageAssetName()));
			newToken.setSize(new Vector2(Constants.defaultTileSize, Constants.defaultTileSize));
			newToken.setGridPosition(boardToRender.tokens.get(i).gridPosition);
			tokenImages.add(newToken);
			
			if(boardToRender.tokens.get(i).tokenOwner == Token.Owner.player1) newToken.tintTexture(1.0f, 0.5f, 0.5f);
			if(boardToRender.tokens.get(i).tokenOwner == Token.Owner.player2) newToken.tintTexture(0.5f, 0.5f, 1.0f);
		}
		
		
	}
	
	public void addMouseListeners(ArrayList<Object> listeners)
	{
		int boardWidth = Constants.boardWidth;
		int boardHeight = Constants.boardHeight;
								
		for(int i = 0; i < boardWidth; i++)
		{
			for(int j = 0; j < boardHeight; j++)
			{
				tileImages[i][j].addMouseEventListener(listeners, new Vector2(i, j));
			}
		}
		
	}
	
	public void highlightTilesAroundPoint(Vector2 point, boolean highLight)
	{
		
		Image upperTile = GetTileImageFromArray(point.x - 1, point.y);
		Image lowerTile = GetTileImageFromArray(point.x + 1, point.y);
		Image leftTile = GetTileImageFromArray(point.x, point.y - 1);
		Image rightTile = GetTileImageFromArray(point.x, point.y + 1);
		Image centerTile = GetTileImageFromArray(point.x, point.y);
	
		
		if(highLight)
		{
			if(upperTile != null) upperTile.tintTexture(1.0f, 1.0f, 0.1f);
			if(lowerTile != null) lowerTile.tintTexture(1.0f, 1.0f, 0.1f);
			if(leftTile != null) leftTile.tintTexture(1.0f, 1.0f, 0.1f);
			if(rightTile != null) rightTile.tintTexture(1.0f, 1.0f, 0.1f);
			if(centerTile != null) centerTile.tintTexture(1.0f, 1.0f, 0.1f);
		}
		else
		{
			if(upperTile != null) upperTile.deTint();
			if(lowerTile != null) lowerTile.deTint();
			if(leftTile != null) leftTile.deTint();
			if(rightTile != null) rightTile.deTint();
			if(centerTile != null) centerTile.deTint();
		}
	}
	

	
	public void MoveTokenImage(Vector2 originalPosition, Vector2 newPosition)
	{
		for(int i = 0; i < tokenImages.size(); i++)
		{
			if(tokenImages.get(i).getGridPosition().equals(originalPosition))
			{
				tokenImages.get(i).setGridPosition(newPosition);
			}
		}
	}
	
	public void handleClickEvent(Vector2 gridPosition)
	{
		
	}
	
	private Image GetTileImageFromArray(int x, int y)
	{
		if(x < 0) return null;
		if(x >= Constants.boardWidth) return null;
		
		if(y < 0) return null;
		if(y >= Constants.boardHeight) return null;
		
		return tileImages[x][y];
		
	}
}


